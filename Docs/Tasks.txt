Investigate how const references works versus const pointers
because that (const CoreVector& Offset) can still have its members modified
DONE: (const CoreVector& Offset) can still have its members modified because x and y in CoreVector
are references, which skip the const limitation.

Tasks
- Turn Animation
- FullScreen / Windowed
- Add ship speed to an ini file, possibly a different ini file to seperate config from design settings
- DONE - Create INI file
- DONE - Ship Direction Vertex
- DONE - Propulsion Particle Effect
- DONE - Add error headers from a past project
- DONE - Add Err Check in CoreConfig and CoreFileINI

Code Improvement
- Create CoreAnimation
- Add Comment headers to each code file (Purpose, Author, see what is used thought open source projects)
- Consider using forward class declaration (class CoreVector;) in Header files instead of adding the #include for it
- DONE - Consider adding CoreSprite and adding more HGE wrappage in CoreSystem (Example: gfx_clear)
         hgeSprite would be used in CoreSprite and nowhere else
- DONE -- Make CoreSystem into a singleton instead of the current "extern CoreSystem*" and "extern HGE*" stuff.
           - A public accessor function or const reference will point to the private static reference of the unique instance.
- DONE -- Having class Constructors doing all the init often force the use of class pointers and reduce flexibility with inheritance
    because of being forced to know the how the parent class is to be initialized all the way down to the first class.
    Consider fixing this with more Init member functions, relating the next task.
- DONE -- Make CoreBody and its childs loadable using either a texture or a background color, instead of forcing a texture
- DONE - Consider passing structs as const reference instead of by value
- DONE - Apply const correctness
- DONE - Add Operators to Vertex
- DONE - Always use Vertex instead of x y
- DONE - Review Quad and Rect init and updates

Next Feature
- Expand the world past the visible window rectangle
- Scroll only when the ship is about to move outside of a center rectangle sized at 50% of screen size.
- Add a zoom function.
- Give some HitPoints to the ship and display them on screen as a % value
- Make the ship explode when HP are <= 0, reset the ship after the explosion animation.
- Add two border zones to the world.
- When the ship is in the first border zone it loses HP over time.
- When the ship is in the second border zone, set HP to zero.
- In the lose hp zone, Alpha degrade background color/texture to black
  Up to the middle of the zone, then to while up to the start of the
  explode zone.

*-ship explodes past this-*
|                         |
|         lose hp         |
|    *---------------*    |
|    |     scroll    |    |
|    |    *-----*    |    |
|    |    | no  |    |    |
|    |    |scroll    |    |
|    |    *-----*    |    |
|    |               |    |
|    *---------------*    |
|                         |
*-------------------------*

- Next add 3 asteroids which are made of 16x16 blocks
*-------------------------*
|                         |
|   ....                  |
|  .    .         ...     |
|  .    .       ..   ..   |
|   ....       .       .  |
|              .       .  |
|   ....       .       .  |
|  .    .      .       .  |
|  .    .      .       .  |
|   ....        ..   ..   |
|                 ...     |
*-------------------------*

- Make the ship rebound a little and take a % damage when it touch them, or something
- Make the ship shoot kind of hybrid plasma
- Shooting the asteroids make some blocks disappears.

This could mean making a explosion list manager, and a dynbody list manager to handle all the projectiles.
Also need to move the directional vector out of the ship class and into dynbody

Ideas
- Radar to display some minimap
- Different kind of radars and minimaps for different tasks.
- Each radar is specialized but can still be configured
- DF like survival and base building using
	- Day/Night cycle as the sun is hidden by a planet or moon
	- Build a base to hide from the sun during the "day"
	- Most active at "night"
	- Once the base is built enough, add solar panels to harvest sun energy
	- Upgrades to allow operations when the sun is not hidden
